package org.com.action;

import java.io.OutputStream;
import java.sql.Connection;
import java.sql.ResultSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.com.dao.DoctorDao;
import org.com.model.Doctor;
import org.com.model.PageBean;
import org.com.model.Patient;
import org.com.model.User;
import org.com.util.DbUtil;
import org.com.util.JsonUtil;
import org.com.util.ResponseUtil;
import org.com.util.StringUtil;

import com.opensymphony.xwork2.ActionSupport;

public class DoctorAction extends ActionSupport implements ServletRequestAware {

	private static final long serialVersionUID = 1L;
	private Doctor doctor;// patient对象
	private String page;// 分页数据
	private String rows;// 分页数据
	private String delIds;// 批量删除数据的序列号
	private String doctorId;// 修改患者资料传递的患者编号
	// 查询条件的变量
	private String s_doctorName = "";
	private String s_sex = "";
	private String s_bbirthday = "";
	private String s_ebirthday = "";
	private String s_keshiId = "";

	DbUtil dbUtil = new DbUtil();
	DoctorDao doctorDao = new DoctorDao();
	HttpServletRequest request;
	User currentUser;

	@Override
	public String execute() throws Exception {
		// 获取Session
		HttpSession session = request.getSession();
		// 链接connection
		Connection con = null;
		PageBean pageBean = new PageBean(Integer.parseInt(page),
				Integer.parseInt(rows));// 分页pageBean
		if (doctor == null) {
			doctor = new Doctor();
		}
		currentUser = (User) session.getAttribute("currentUser");
		// 将查询条件赋值给doctor对象
		if (s_doctorName != null) {
			doctor.setDoctorName(s_doctorName);
			doctor.setSex(s_sex);
			if (StringUtil.isNotEmpty(s_keshiId)) {
				doctor.setKeshiId(Integer.parseInt(s_keshiId));
			}
		}
		try {
			con = dbUtil.getCon();
			JSONObject result = new JSONObject();
			JSONArray jsonArray = JsonUtil
					.formatRsToJsonArray(doctorDao.doctorList(con, pageBean,
							doctor, s_bbirthday, s_ebirthday));
			int total = doctorDao.doctorCount(con, doctor, s_bbirthday,
					s_ebirthday);
			result.put("rows", jsonArray);
			result.put("total", total);
			ResponseUtil.write(ServletActionContext.getResponse(), result);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public void printDoctor(){
		System.out.println(doctor.getDoctorName());
		System.out.println(doctor.getSex());
		System.out.println(doctor.getBirthday());
		System.out.println(doctor.getByyx());
		System.out.println(doctor.getCynx());
		System.out.println(doctor.getKeshiId());
		System.out.println(doctor.getZhicheng());
	}
	// 保存患者数据(新增和修改)
	public String save() throws Exception {
		// 判断patientId是否为空
		if (StringUtil.isNotEmpty(doctorId)) {
			doctor.setDoctorId(Integer.parseInt(doctorId));
		}
		Connection con=null;
		try{
			con=dbUtil.getCon();
			int saveNums=0;
			JSONObject result=new JSONObject();
			if(StringUtil.isNotEmpty(doctorId)){
			//不为空，修改患者信息
				saveNums=doctorDao.doctorModify(con, doctor);
			}else{
			//patientId为空，新增患者
				saveNums=doctorDao.doctorAdd(con, doctor);
			}
			if(saveNums>0){
				result.put("success", "true");
			}else{
				result.put("success", "true");//业务逻辑,需要返回success，但返回的是错误message
				result.put("errorMsg", "保存失败");
			}
			ResponseUtil.write(ServletActionContext.getResponse(), result);
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public String delete()throws Exception{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			JSONObject result=new JSONObject();
			int delNums = doctorDao.doctorDelete(con,delIds);
			if(delNums>0){
				result.put("success", "true");
				result.put("delNums", delNums);
			}else{
				result.put("errorMsg", "删除失败");
			}
			ResponseUtil.write(ServletActionContext.getResponse(), result);
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	//输出excel表格（xls）
	public void exportDoctor() throws Exception{
		// 创建Excel的工作书册 Workbook,对应到一个excel文档
	    HSSFWorkbook wb = new HSSFWorkbook();

	    // 创建Excel的工作sheet,对应到一个excel文档的tab
	    HSSFSheet sheet = wb.createSheet("sheet1");

	    // 设置excel每列宽度
	    sheet.setColumnWidth(0, 4000);
	    sheet.setColumnWidth(1, 3500);

	    // 创建字体样式
	    HSSFFont font = wb.createFont();
	    font.setFontName("Verdana");
	    font.setBoldweight((short) 100);
	    font.setFontHeight((short) 300);
	    font.setColor(HSSFColor.BLUE.index);

	    // 创建单元格样式
	    HSSFCellStyle style = wb.createCellStyle();
	    style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
	    style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
	    style.setFillForegroundColor(HSSFColor.LIGHT_TURQUOISE.index);
	    style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

	    // 设置边框
	    style.setBottomBorderColor(HSSFColor.RED.index);
	    style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
	    style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
	    style.setBorderRight(HSSFCellStyle.BORDER_THIN);
	    style.setBorderTop(HSSFCellStyle.BORDER_THIN);

	    style.setFont(font);// 设置字体
	    style.setWrapText(true);// 自动换行

	    // 创建Excel的sheet的一行
	    HSSFRow row = sheet.createRow(0);
	    row.setHeight((short) 500);// 设定行的高度
	    HSSFCell cell=null;
	    // 创建一个Excel的单元格
	    String[] cellTitle = {"编号", "医生姓名", "性别","出生日期", "毕业院校", "从业年限","科室","职称","专长","最多人数","剩余人数","开始日期","结束日期"};	
		for (int i = 0; i < cellTitle.length; i++) {
			cell = row.createCell(i);
			// 给Excel的单元格设置样式和赋值
		    cell.setCellStyle(style);
			cell.setCellValue(cellTitle[i]);
		}
		// 获取Session
		HttpSession session=request.getSession();	
		//链接connection
		Connection con=null;
		if(doctor==null){
			doctor=new Doctor();
		}
		// 将查询条件赋值给doctor对象
		if (s_doctorName != null) {
			doctor.setDoctorName(s_doctorName);
			doctor.setSex(s_sex);
			if (StringUtil.isNotEmpty(s_keshiId)) {
				doctor.setKeshiId(Integer.parseInt(s_keshiId));
			}
		}
		ResultSet rs=null;
		try{
			con=dbUtil.getCon();
			rs=doctorDao.doctorList(con, null,doctor,s_bbirthday,s_ebirthday);
			int rowIndex=1;	
			while(rs.next()){
				row = sheet.createRow(rowIndex++);
				cell = row.createCell(0);
				cell.setCellValue(rs.getString("doctorId"));
				cell = row.createCell(1);
				cell.setCellValue(rs.getString("doctorName"));
				cell = row.createCell(2);
				cell.setCellValue(rs.getString("sex"));
				cell = row.createCell(3);
				cell.setCellValue(rs.getString("birthday"));
				cell = row.createCell(4);
				cell.setCellValue(rs.getString("byyx"));
				cell = row.createCell(5);
				cell.setCellValue(rs.getInt("cynx"));
				cell = row.createCell(6);
				cell.setCellValue(rs.getInt("keshiId"));
				cell = row.createCell(7);
				cell.setCellValue(rs.getString("zhicheng"));
				cell = row.createCell(8);
				cell.setCellValue(rs.getString("zhuanchang"));
				cell = row.createCell(9);
				cell.setCellValue(rs.getInt("maxpeople"));
				cell = row.createCell(10);
				cell.setCellValue(rs.getInt("remain"));
				cell = row.createCell(11);
				cell.setCellValue(rs.getString("starttime"));
				cell = row.createCell(12);
				cell.setCellValue(rs.getString("endtime"));
			}	
			String exportFileName = "doctor.xls";
			
			ServletActionContext.getResponse().setHeader("Content-Disposition", "attachment;filename=" + new String((exportFileName).getBytes(), "ISO8859-1"));//设定输出文件头
			ServletActionContext.getResponse().setContentType("application/vnd.ms-excel;charset=UTF-8");// 定义输出类型
			
			
			OutputStream out = ServletActionContext.getResponse().getOutputStream();
			wb.write(out);
			out.flush();
			out.close();	
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try {
				dbUtil.closeCon(con);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		}
	}
	
	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request = request;
	}

	public Doctor getDoctor() {
		return doctor;
	}

	public void setDoctor(Doctor doctor) {
		this.doctor = doctor;
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}

	public String getRows() {
		return rows;
	}

	public void setRows(String rows) {
		this.rows = rows;
	}

	public String getDelIds() {
		return delIds;
	}

	public void setDelIds(String delIds) {
		this.delIds = delIds;
	}

	public String getDoctorId() {
		return doctorId;
	}

	public void setDoctorId(String doctorId) {
		this.doctorId = doctorId;
	}

	public String getS_doctorName() {
		return s_doctorName;
	}

	public void setS_doctorName(String s_doctorName) {
		this.s_doctorName = s_doctorName;
	}

	public String getS_sex() {
		return s_sex;
	}

	public void setS_sex(String s_sex) {
		this.s_sex = s_sex;
	}

	public String getS_bbirthday() {
		return s_bbirthday;
	}

	public void setS_bbirthday(String s_bbirthday) {
		this.s_bbirthday = s_bbirthday;
	}

	public String getS_ebirthday() {
		return s_ebirthday;
	}

	public void setS_ebirthday(String s_ebirthday) {
		this.s_ebirthday = s_ebirthday;
	}

	public String getS_keshiId() {
		return s_keshiId;
	}

	public void setS_keshiId(String s_keshiId) {
		this.s_keshiId = s_keshiId;
	}
}
